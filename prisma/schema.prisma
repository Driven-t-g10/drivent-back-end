// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String?        @unique @db.VarChar(255)
  password     String         @db.VarChar(255)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  githubId     String?        @unique @db.VarChar(255)
  Session      Session[]
  Enrollment   Enrollment[]
  UserTicket   UserTicket[]
  UserRoom     UserRoom?
  UserActivity UserActivity[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enrollment {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  cpf       String    @db.VarChar(255)
  birthday  DateTime
  phone     String    @db.VarChar(255)
  userId    Int       @unique
  User      User      @relation(fields: [userId], references: [id])
  Address   Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id            Int        @id @default(autoincrement())
  cep           String     @db.VarChar(255)
  street        String     @db.VarChar(255)
  city          String     @db.VarChar(255)
  state         String     @db.VarChar(255)
  number        String     @db.VarChar(255)
  neighborhood  String     @db.VarChar(255)
  addressDetail String?    @db.VarChar(255)
  enrollmentId  Int        @unique
  Enrollment    Enrollment @relation(fields: [enrollmentId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Ticket {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  price      Float
  quantity   Int
  hotelPrice Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  UserTicket UserTicket[]
}

model UserTicket {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  ticketId  Int
  Ticket    Ticket   @relation(fields: [ticketId], references: [id])
  isPaid    Boolean  @default(false)
  hasHotel  Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model Hotel {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Room      Room[]
}

model Room {
  id        Int        @id @default(autoincrement())
  beds      Int
  number    Int
  hotelId   Int
  Hotel     Hotel      @relation(fields: [hotelId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  UserRoom  UserRoom[]

  @@unique([number, hotelId])
}

model UserRoom {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  User   User @relation(fields: [userId], references: [id])
  roomId Int
  Room   Room @relation(fields: [roomId], references: [id])
}

model Activity {
  id           Int            @id @default(autoincrement())
  name         String
  place        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Schedule     Schedule[]
  UserActivity UserActivity[]
}

model Schedule {
  id         Int      @id @default(autoincrement())
  date       String
  time       String
  activityId Int
  Activity   Activity @relation(fields: [activityId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserActivity {
  id         Int      @id @default(autoincrement())
  userId     Int
  User       User     @relation(fields: [userId], references: [id])
  activityId Int
  Activity   Activity @relation(fields: [activityId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
